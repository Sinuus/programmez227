{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fnil\fcharset0 Consolas;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red163\green21\blue21;
\red0\green0\blue255;\red0\green128\blue128;\red47\green79\blue79;\red128\green128\blue128;\red0\green128\blue0;
}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0;\csgenericrgb\c16863\c56863\c68627;\csgenericrgb\c63922\c8235\c8235;
\csgenericrgb\c0\c0\c100000;\csgenericrgb\c0\c50196\c50196;\csgenericrgb\c18431\c30980\c30980;\csgenericrgb\c50196\c50196\c50196;\csgenericrgb\c0\c50196\c0;
}
{\info
{\author Christophe Pichaud}
{\*\company NEOS-SDI}}\paperw12240\paperh15840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\pardirnatural\partightenfactor0

\f0\fs22 \cf0 \
\pard\pardeftab720\pardirnatural\partightenfactor0

\f1\fs19 \cf2 	\cf3 string\cf2  cascadeName = \cf4 "haarcascade_frontalface_alt.xml"\cf2 ;\
	\cf3 string\cf2  nestedCascadeName = \cf4 "haarcascade_eye_tree_eyeglasses.xml"\cf2 ;\
	scale = 1.3;\
	\cf5 if\cf2  (!nestedCascade.load(samples::findFileOrKeep(nestedCascadeName)))\
	\{\
		cerr \cf6 <<\cf2  \cf4 "Could not load classifier cascade"\cf2  \cf6 <<\cf2  endl;\
		\cf5 return\cf2  1;\
	\}\
\
	\cf5 if\cf2  (!cascade.load(samples::findFile(cascadeName)))\
	\{\
		cerr \cf6 <<\cf2  \cf4 "Could not load classifier cascade"\cf2  \cf6 <<\cf2  endl;\
		\cf5 return\cf2  1;\
	\}\
\
	\cf5 double\cf2  scale = 1.3;\
	\cf3 string\cf2  inputName = inputName \cf6 =\cf2  \cf4 "image.jpg"\cf2 ;\
	\cf5 bool\cf2  tryflip = \cf5 false\cf2 ;\
\
	\cf3 Mat\cf2  image = imread(samples::findFileOrKeep(inputName), \cf7 IMREAD_COLOR\cf2 );\
	\cf5 if\cf2  (image.empty())\
	\{\
		\cf5 if\cf2  (!capture.open(samples::findFileOrKeep(inputName)))\
		\{\
			cout \cf6 <<\cf2  \cf4 "Could not read "\cf2  \cf6 <<\cf2  inputName \cf6 <<\cf2  endl;\
			\cf5 return\cf2  1;\
		\}\
	\}\
\
	cout \cf6 <<\cf2  \cf4 "Detecting face(s) in "\cf2  \cf6 <<\cf2  inputName \cf6 <<\cf2  endl;\
	\cf5 if\cf2  (!image.empty())\
	\{\
		detectAndDraw(image, cascade, nestedCascade, scale, tryflip);\
		waitKey(0);\
	\}\
\
\pard\pardeftab720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
\pard\pardeftab720\pardirnatural\partightenfactor0

\f1\fs19 \cf5 void\cf2  detectAndDraw(\cf3 Mat\cf2 & \cf8 img\cf2 , \cf3 CascadeClassifier\cf2 & \cf8 cascade\cf2 ,\
	\cf3 CascadeClassifier\cf2 & \cf8 nestedCascade\cf2 ,\
	\cf5 double\cf2  \cf8 scale\cf2 , \cf5 bool\cf2  \cf8 tryflip\cf2 )\
\{\
	\cf5 double\cf2  t = 0;\
	\cf3 vector\cf2 <\cf3 Rect\cf2 > faces, faces2;\
	\cf5 const\cf2  \cf5 static\cf2  \cf3 Scalar\cf2  colors[] =\
	\{\
		\cf3 Scalar\cf2 (255,0,0),\
		\cf3 Scalar\cf2 (255,128,0),\
		\cf3 Scalar\cf2 (255,255,0),\
		\cf3 Scalar\cf2 (0,255,0),\
		\cf3 Scalar\cf2 (0,128,255),\
		\cf3 Scalar\cf2 (0,255,255),\
		\cf3 Scalar\cf2 (0,0,255),\
		\cf3 Scalar\cf2 (255,0,255)\
	\};\
	\cf3 Mat\cf2  gray, smallImg;\
\
	cvtColor(\cf8 img\cf2 , gray, \cf7 COLOR_BGR2GRAY\cf2 );\
	\cf5 double\cf2  fx = 1 / \cf8 scale\cf2 ;\
	resize(gray, smallImg, \cf3 Size\cf2 (), fx, fx, \cf7 INTER_LINEAR_EXACT\cf2 );\
	equalizeHist(smallImg, smallImg);\
\
	t = (\cf5 double\cf2 )getTickCount();\
	\cf8 cascade\cf2 .detectMultiScale(smallImg, faces,\
		1.1, 2, 0\
		\cf9 //|CASCADE_FIND_BIGGEST_OBJECT\
\pard\pardeftab720\pardirnatural\partightenfactor0
\cf2 		\cf9 //|CASCADE_DO_ROUGH_SEARCH\
\cf2 		| \cf7 CASCADE_SCALE_IMAGE\cf2 ,\
		\cf3 Size\cf2 (30, 30));\
	t = (\cf5 double\cf2 )getTickCount() - t;\
	printf(\cf4 "detection time = %g ms\\n"\cf2 , t * 1000 / getTickFrequency());\
	\
	\cf5 for\cf2  (\cf3 size_t\cf2  i = 0; i < faces.size(); i++)\
	\{\
		\cf3 Rect\cf2  r = faces\cf6 [\cf2 i\cf6 ]\cf2 ;\
		\cf3 Mat\cf2  smallImgROI;\
		\cf3 vector\cf2 <\cf3 Rect\cf2 > nestedObjects;\
		\cf3 Point\cf2  center;\
		\cf3 Scalar\cf2  color = colors[i % 8];\
		\cf5 int\cf2  radius;\
\
		rectangle(\cf8 img\cf2 , \cf3 Point\cf2 (cvRound(r.x*\cf8 scale\cf2 ), cvRound(r.y*\cf8 scale\cf2 )),\
			\cf3 Point\cf2 (cvRound((r.x + r.width - 1)*\cf8 scale\cf2 ), \
\pard\pardeftab720\li2160\pardirnatural\partightenfactor0
\cf2 cvRound((r.y + r.height - 1)*\cf8 scale\cf2 )),\
\pard\pardeftab720\pardirnatural\partightenfactor0
\cf2 			color, 2, 8, 0);\
	\
		\cf5 if\cf2  (\cf8 nestedCascade\cf2 .empty())\
			\cf5 continue\cf2 ;\
		\
		smallImgROI \cf6 =\cf2  smallImg\cf6 (\cf2 r\cf6 )\cf2 ;\
		\cf8 nestedCascade\cf2 .detectMultiScale(smallImgROI, nestedObjects,\
			1.1, 2, 0\
			\cf9 //|CASCADE_FIND_BIGGEST_OBJECT\
\cf2 			\cf9 //|CASCADE_DO_ROUGH_SEARCH\
\cf2 			\cf9 //|CASCADE_DO_CANNY_PRUNING\
\cf2 			| \cf7 CASCADE_SCALE_IMAGE\cf2 ,\
			\cf3 Size\cf2 (30, 30));\
\
		\cf5 for\cf2  (\cf3 size_t\cf2  j = 0; j < nestedObjects.size(); j++)\
		\{\
			\cf3 Rect\cf2  nr = nestedObjects\cf6 [\cf2 j\cf6 ]\cf2 ;\
			center.x = cvRound((r.x + nr.x + nr.width*0.5)*\cf8 scale\cf2 );\
			center.y = cvRound((r.y + nr.y + nr.height*0.5)*\cf8 scale\cf2 );\
			radius = cvRound((nr.width + nr.height)*0.25*\cf8 scale\cf2 );\
			circle(\cf8 img\cf2 , center, radius, color, 2, 8, 0);\
		\}\
	\}\
	\
	imshow(\cf4 "result"\cf2 , \cf8 img\cf2 );\
\}\
\pard\pardeftab720\pardirnatural\partightenfactor0

\f0\fs24 \cf0  \
\
\pard\pardeftab720\pardirnatural\partightenfactor0

\fs22 \cf0 \
\pard\pardeftab720\pardirnatural\partightenfactor0

\f1\fs19 \cf3 Ptr\cf2 <\cf3 EigenFaceRecognizer\cf2 > model = \cf3 EigenFaceRecognizer\cf2 ::create();\
	\cf5 for\cf2  (\cf5 int\cf2  i = 0; i < nlabels; i++)\
		model\cf6 ->\cf2 setLabelInfo(i, labelsInfo\cf6 [\cf2 i\cf6 ]\cf2 );\
	model\cf6 ->\cf2 train(images, labels);\
	\cf3 string\cf2  saveModelPath = \cf4 "face-rec-model.txt"\cf2 ;\
	cout \cf6 <<\cf2  \cf4 "Saving the trained model to "\cf2  \cf6 <<\cf2  saveModelPath \cf6 <<\cf2  endl;\
	model\cf6 ->\cf2 save(saveModelPath);\
\
\pard\pardeftab720\pardirnatural\partightenfactor0

\f0\fs22 \cf0 \
\
\pard\pardeftab720\pardirnatural\partightenfactor0

\f1\fs19 \cf2 	\cf3 Mat\cf2  testSample = imread(\cf8 argv\cf2 [3], 0);\
	\cf5 int\cf2  predictedLabel = model\cf6 ->\cf2 predict(testSample);\
	\cf3 string\cf2  result_message = \
\pard\pardeftab720\li720\pardirnatural\partightenfactor0
\cf2 format(\cf4 "Predicted class = %d / Actual class = %d."\cf2 , \
\pard\pardeftab720\li1440\pardirnatural\partightenfactor0
\cf2 predictedLabel, testLabel);\
\pard\pardeftab720\pardirnatural\partightenfactor0
\cf2 	cout \cf6 <<\cf2  result_message \cf6 <<\cf2  endl;\
\
	\cf5 auto\cf2  it = labelsInfo.find(predictedLabel);\
	\cf3 string\cf2  name;\
	\cf5 if\cf2  (it \cf6 !=\cf2  labelsInfo.end())\
	\{\
		name \cf6 =\cf2  it\cf6 ->\cf2 second;\
		cout \cf6 <<\cf2  \cf4 "Name is : "\cf2  \cf6 <<\cf2  name \cf6 <<\cf2  endl;\
	\}\
\
}